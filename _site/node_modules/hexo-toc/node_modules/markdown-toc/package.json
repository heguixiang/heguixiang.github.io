{
  "name": "markdown-toc",
  "description": "Generate a markdown TOC (table of contents) with Remarkable.",
  "version": "0.11.7",
  "homepage": "https://github.com/jonschlinkert/markdown-toc",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/markdown-toc"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/markdown-toc/issues"
  },
  "license": "MIT",
  "files": [
    "cli.js",
    "index.js",
    "lib/"
  ],
  "main": "index.js",
  "bin": {
    "markdown-toc": "cli.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "concat-stream": "^1.5.0",
    "gray-matter": "^2.0.1",
    "lazy-cache": "^0.2.3",
    "markdown-link": "^0.1.1",
    "minimist": "^1.2.0",
    "mixin-deep": "^1.1.3",
    "object.pick": "^1.1.1",
    "remarkable": "^1.6.0",
    "repeat-string": "^1.5.2"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "keywords": [
    "anchor",
    "commonmark",
    "docs",
    "document",
    "documentation",
    "heading",
    "markdown",
    "md",
    "glossary",
    "index",
    "links",
    "reference",
    "readme",
    "remarkable",
    "remarkableplugin",
    "plugin",
    "render",
    "renderer",
    "table-of-contents",
    "table of contents",
    "table",
    "toc",
    "write"
  ],
  "directories": {
    "test": "test"
  },
  "verb": {
    "related": {
      "list": [
        "remarkable",
        "markdown-utils",
        "markdown-link",
        "gfm-code-blocks",
        "pretty-remarkable"
      ]
    },
    "reflinks": [
      "verb"
    ]
  },
  "readme": "# markdown-toc [![NPM version](https://badge.fury.io/js/markdown-toc.svg)](http://badge.fury.io/js/markdown-toc)  [![Build Status](https://travis-ci.org/jonschlinkert/markdown-toc.svg)](https://travis-ci.org/jonschlinkert/markdown-toc)\n\n> Generate a markdown TOC (table of contents) with Remarkable.\n\n<!-- toc -->\n\n* [Install](#install)\n* [Usage](#usage)\n* [API](#api)\n  - [toc.json](#tocjson)\n  - [toc.insert](#tocinsert)\n  - [Utility functions](#utility-functions)\n* [Options](#options)\n  - [options.append](#optionsappend)\n  - [options.filter](#optionsfilter)\n  - [options.bullets](#optionsbullets)\n  - [options.maxdepth](#optionsmaxdepth)\n  - [options.firsth1](#optionsfirsth1)\n* [Related projects](#related-projects)\n* [Running tests](#running-tests)\n* [Contributing](#contributing)\n* [Author](#author)\n* [License](#license)\n\n_(Table of contents generated by [verb](https://github.com/verbose/verb))_\n\n<!-- tocstop -->\n\n**Features**\n\n* Won't mangle markdown in code examples (like headings, coffee or yaml comments in gfm fenced code blocks that other TOC generators mistake as being actual headings)\n* Uses sane defaults, so no customization is necessary, but you can if you need to.\n* Get JSON to generate your own TOC from whatever templates you want to use\n* [filter](#filter-headings) out headings you don't want\n* [Improve](#titleize) the headings you do want\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i markdown-toc --save\n```\n\n## Usage\n\n```js\nvar toc = require('markdown-toc');\n\ntoc('# One\\n\\n# Two').content;\n// Results in:\n// - [One](#one)\n// - [Two](#two)\n```\n\nTo allow customization of the output, an object is returned with the following properties:\n\n* `content` **{String}**: The generated table of contents. Unless you want to customize rendering, this is all you need.\n* `highest` **{Number}**: The highest level heading found. This is used to adjust indentation.\n* `tokens` **{Array}**: Headings tokens that can be used for custom rendering\n\n## API\n\n### toc.json\n\nObject for creating a custom TOC.\n\n```js\ntoc('# AAA\\n## BBB\\n### CCC\\nfoo').json;\n\n// results in\n[ { content: 'AAA', lvl: 1 },\n  { content: 'BBB', lvl: 2 },\n  { content: 'CCC', lvl: 3 } ]\n```\n\n### toc.insert\n\nInsert a table of contents immediately after an _opening_ `<!-- toc -->` code comment, or replace an existing TOC if both an _opening_ comment and a _closing_ comment (`<!-- tocstop -->`) are found.\n\n_(This strategy works well since code comments in markdown are hidden when viewed as HTML, like when viewing a README on GitHub README for example)._\n\n**Example**\n\n```markdown\n<!-- toc -->\n- old toc 1\n- old toc 2\n- old toc 3\n<!-- tocstop -->\n\n## abc\nThis is a b c.\n\n## xyz\nThis is x y z.\n```\n\nWould result in something like:\n\n```markdown\n<!-- toc -->\n- [abc](#abc)\n- [xyz](#xyz)\n<!-- tocstop -->\n\n## abc\nThis is a b c.\n\n## xyz\nThis is x y z.\n```\n\n### Utility functions\n\nAs a convenience to folks who wants to create a custom TOC, markdown-toc's internal utility methods are exposed:\n\n```js\nvar toc = require('markdown-toc');\n```\n\n* `toc.bullets()`: render a bullet list from an array of tokens\n* `toc.linkify()`: linking a heading `content` string\n* `toc.slugify()`: slugify a heading `content` string\n* `toc.strip()`: strip words or characters from a heading `content` string\n\n**Example**\n\n```js\nvar result = toc('# AAA\\n## BBB\\n### CCC\\nfoo');\nvar str = '';\n\nresult.json.forEach(function(heading) {\n  str += toc.linkify(heading.content);\n});\n```\n\n## Options\n\n### options.append\n\nAppend a string to the end of the TOC.\n\n```js\ntoc(str, {append: '\\n_(TOC generated by Verb)_'});\n```\n\n### options.filter\n\nType: `Function`\n\nDefault: `undefined`\n\nParams:\n\n* `str` **{String}** the actual heading string\n* `ele` **{Objecct}** object of heading tokens\n* `arr` **{Array}** all of the headings objects\n\n**Example**\n\nFrom time to time, we might get junk like this in our TOC.\n\n```markdown\n[.aaa([foo], ...) another bad heading](#-aaa--foo--------another-bad-heading)\n```\n\nUnless you like that kind of thing, you might want to filter these bad headings out.\n\n```js\nfunction removeJunk(str, ele, arr) {\n  return str.indexOf('...') === -1;\n}\n\nvar result = toc(str, {filter: removeJunk});\n//=> beautiful TOC\n```\n\n### options.bullets\n\nType: `String|Array`\n\nDefault: `*`\n\nThe bullet to use for each item in the generated TOC. If passed as an array (`['*', '-', '+']`), the bullet point strings will be used based on the header depth.\n\n### options.maxdepth\n\nType: `Number`\n\nDefault: `6`\n\nUse headings whose depth is at most maxdepth.\n\n### options.firsth1\n\nType: `Boolean`\n\nDefault: `true`\n\nExclude the first h1-level heading in a file. For example, this prevents the first heading in a README from showing up in the TOC.\n\n## Related projects\n\n* [gfm-code-blocks](https://www.npmjs.com/package/gfm-code-blocks): Extract gfm (GitHub Flavored Markdown) fenced code blocks from a string. | [homepage](https://github.com/jonschlinkert/gfm-code-blocks)\n* [markdown-link](https://www.npmjs.com/package/markdown-link): Micro util for generating a single markdown link. | [homepage](https://github.com/jonschlinkert/markdown-link)\n* [markdown-utils](https://www.npmjs.com/package/markdown-utils): Micro-utils for creating markdown snippets. | [homepage](https://github.com/jonschlinkert/markdown-utils)\n* [pretty-remarkable](https://www.npmjs.com/package/pretty-remarkable): Plugin for prettifying markdown with Remarkable using custom renderer rules. | [homepage](https://github.com/jonschlinkert/pretty-remarkable)\n* [remarkable](https://www.npmjs.com/package/remarkable): Markdown parser, done right. 100% Commonmark support, extensions, syntax plugins, high speed - all in… [more](https://www.npmjs.com/package/remarkable) | [homepage](https://github.com/jonschlinkert/remarkable)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/markdown-toc/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2014-2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 17, 2015._\n",
  "readmeFilename": "README.md",
  "_id": "markdown-toc@0.11.7",
  "dist": {
    "shasum": "6b179ea951194fe8ac5ea5e7444890255c5c4658"
  },
  "_from": "markdown-toc@^0.11.2",
  "_resolved": "https://registry.npmjs.org/markdown-toc/-/markdown-toc-0.11.7.tgz"
}
